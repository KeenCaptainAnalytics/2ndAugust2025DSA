/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode temp = new ListNode(0);
        ListNode head = temp;
        int carry =0;

        while(l1!=null || l2!=null || carry!=0){
            if(l1==null && l2==null && carry==1){
                temp.next = new ListNode(1);
                carry =0;
            }
            else if(l1!=null && l2== null ){
                if(carry ==1){
                    l1.val = l1.val+carry;
                    if(l1.val>=10){
                        carry =1;
                        l1.val = l1.val%10;
                    }
                    else{
                        carry =0;
                    }
                    temp.next = l1;
                    temp = temp.next;
                    l1= l1.next;
                }
                else{
                    temp.next = l1;

                    break;
                }
            
            }
            else if(l1==null && l2!= null ){
                if(carry ==1){

                    l2.val = l2.val+carry;
                    if(l2.val>=10){
                        carry =1;
                        l2.val = l2.val%10;
                    }
                    else{
                        carry =0;
                    }
                    temp.next = l2;
                    temp= temp.next;
                    l2= l2.next;
                }
                else{
                    temp.next = l2;
                    temp= temp.next;
                    break;
                }
            
            }
            else if(l1!=null && l2!=null){
                l1.val = l1.val +l2.val +carry;
                if(l1.val>=10){
                    carry =1;
                    l1.val = l1.val%10;
                }
                else{
                    carry =0 ;
                }
                temp.next = l1;
                temp = temp.next;
                l1= l1.next;
                l2= l2.next;
            }
        }

        return head.next;

    }
}








